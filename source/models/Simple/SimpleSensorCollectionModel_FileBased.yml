DEFAULT:
  msg_size_key: size_mbits
  seed: 42

FromQueue:
  type: FileDataSource
  file_name: test_task_assignments.json
  file_keys:
    [
      assignment_id,
      satellite_name,
      target_id,
      aimpoint_latitude,
      aimpoint_longitude,
      access_start_time_unix_ts,
      access_end_time_unix_ts,
      access_start_time_iso,
      advance_simulation_time_to_unix_ts,
    ]
  # topic_name: my-topic
  # sub_name: my-sub
  # simtime_field_name: simtime
  # poll_frequency_secs: 11.0
  # timeout_secs: 5.0
  # retry_on_connection_error: true
  # max_retry_attempts: 3
  # retry_delay_secs: 10.0
  ParseTaskingMessage: ~

ParseTaskingMessage:
  type: ParseJsonMessage
  json_key: json_data
  pydantic_types: [SimTaskBatchPayload, SimTimeAdvanceCommandPayload]
  result_key: parsed_message
  error_key: parse_error
  successful_type_key: successful_type
  write_out_field_list:
    [
      assignment_id,
      satellite_name,
      target_id,
      aimpoint_latitude,
      aimpoint_longitude,
      access_start_time_unix_ts,
      access_end_time_unix_ts,
      access_start_time_iso,
      advance_simulation_time_to_unix_ts,
    ]
  preserve_json: false
  time_processing: 0.0
  time_delay: 0.1
  AdvanceSimulationTime: successful_type == "SimulatorControlMessage"
  UplinkTime: successful_type == "TaskAssignment"

AdvanceSimulationTime:
  type: KeyDelayTime
  delay_key: advance_simulation_time_to_unix_ts
  convert_unix_time: true
  FromQueue: ~
  # Alternative ISO datetime configuration:
  # convert_iso_datetime: true

UplinkTime:
  type: RandomDistrib
  population: [10, 20, 30, 40, 50, 60, 80, 90]
  weights: [1, 2, 4, 7, 8, 7, 4, 2, 1]
  time_delay: 1
  result_key: uplinkTimeSecs
  ConvertUplinkTimeToDateTime: ~

ConvertUplinkTimeToDateTime:
  type: AddKeyValue
  result_key: UplinkTime
  time_delay: 1
  def value_fn(sim_time,msg): "return sim_time  + msg['uplinkTimeSecs']"
  ConvertAccessTimeToISO: ~

ConvertAccessTimeToISO:
  type: AddKeyValue
  result_key: access_start_time_iso
  time_delay: 0.1
  def value_fn(sim_time,msg): "import datetime; return datetime.datetime.fromtimestamp(msg['access_start_time_unix_ts'], tz=datetime.timezone.utc).isoformat()"
  CalculatePosition: ~

CalculatePosition:
  type: CalculateGeometry
  satellite_name_key: satellite_name
  tle_file_path: ./data/satellites.json
  target_lat_key: aimpoint_latitude
  target_lon_key: aimpoint_longitude
  target_alt_key: target_alt
  start_time_key: access_start_time_iso
  target_lat: 0.0
  target_lon: 0.0
  target_alt: 0.0
  duration_seconds: 1.0
  step_seconds: 1.0
  single_time_point: true
  storage_key: geometry_results
  time_processing: 0.0
  time_delay: 1.0
  CalculateGSD: ~

CalculateGSD:
  type: CalculateGSD
  distance_key: distance_km
  source_pos_key: observer_position_ecef_km
  target_pos_key: target_position_ecef_km
  use_ecef_positions: true
  geometry_results_key: geometry_results
  sensor_height_mm: 36.0
  sensor_width_mm: 24.0
  focal_length_mm: 500.0
  image_height_px: 6000.0
  image_width_px: 4000.0
  use_sensor_height: true
  gsd_storage_key: gsd_m_per_px
  distance_km: 400.0
  time_processing: 0.0
  time_delay: 1.0
  DownlinkTime: ~

# Quality:
#   type: RandomDistrib
#   population: [1, 2, 3, 4, 5, 6, 7, 8, 9]
#   weights: [1, 2, 4, 7, 8, 7, 4, 2, 1]
#   time_delay: 1
#   results_key: Quality
#   DownlinkTime: ~

DownlinkTime:
  type: RandomDistrib
  population: [10, 20, 30, 40, 50, 60, 80, 90]
  weights: [1, 2, 4, 7, 8, 7, 4, 2, 1]
  time_delay: 1
  result_key: downlinkTimeSecs
  ConvertDownlinkTimeToDateTime: ~

ConvertDownlinkTimeToDateTime:
  type: AddKeyValue
  result_key: DownlinkTime
  time_delay: 1
  def value_fn(sim_time,msg): "return msg['UplinkTime'] + msg['downlinkTimeSecs'] "
  ProcessingTime: ~

ProcessingTime:
  type: RandomDistrib
  population: [10, 20, 30, 40, 50, 60, 80, 90]
  weights: [1, 2, 4, 7, 8, 7, 4, 2, 1]
  time_delay: 1
  result_key: processingTimeSecs
  ConvertProcessingTimeToDateTime: ~

ConvertProcessingTimeToDateTime:
  type: AddKeyValue
  result_key: ProcessingTime
  time_delay: 1
  def value_fn(sim_time,msg): "return msg['DownlinkTime'] + msg['processingTimeSecs']"
  FinalNode: ~

# ProductDelivery:
#   type: PulsarTopicSink
#   topic_name: simulator_output_topic
#   pulsar_server: pulsar://localhost:6650
#   use_pydantic_validation: true
#   pydantic_class: CollectedTargetData
#   time_delay: 1
#   FinalNode: ~

FinalNode:
  type: DelayTime
  time_delay: 0
