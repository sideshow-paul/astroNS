apiVersion: v1
kind: Pod
metadata:
  name: pulsar-test-client
  namespace: pulsar
  labels:
    app: pulsar-test-client
spec:
  containers:
    - name: pulsar-client
      image: python:3.11-slim
      command: ["/bin/bash", "-c"]
      args:
        - |
          # Install required packages
          apt-get update && \
          apt-get install -y --no-install-recommends \
            build-essential \
            cmake \
            libssl-dev \
            libcurl4-openssl-dev \
            libboost-dev \
            libboost-system-dev \
            libprotobuf-dev \
            protobuf-compiler \
            zlib1g-dev \
            && apt-get clean \
            && rm -rf /var/lib/apt/lists/*

          # Install Python client
          pip install --no-cache-dir pulsar-client==3.6.1 setuptools wheel
          # Verify installation
          python -c "import pulsar; print(f'Pulsar client version: {pulsar.__version__}')"

          # Setup working directory and make scripts executable
          mkdir -p /app
          cp /app/scripts/* /app/
          chmod +x /app/*.py

          # Keep the container running
          echo "Pulsar test client ready. Use kubectl exec to run test scripts."
          echo "Examples:"
          echo "  kubectl exec -it pulsar-test-client -n pulsar -- python /app/pulsar_producer.py --topic persistent://public/default/test --num-messages 5"
          echo "  kubectl exec -it pulsar-test-client -n pulsar -- python /app/pulsar_consumer.py --topic persistent://public/default/test"
          tail -f /dev/null
      volumeMounts:
        - name: test-scripts
          mountPath: /app/scripts
      workingDir: /app
      env:
        - name: PULSAR_BROKER_URL
          value: "pulsar://pulsar-broker:6650"
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "200m"
  volumes:
    - name: test-scripts
      configMap:
        name: pulsar-test-scripts
        defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pulsar-test-scripts
  namespace: pulsar
data:
  pulsar_producer.py: |
    #!/usr/bin/env python3
    import os
    import time
    import json
    import uuid
    import argparse
    import logging
    from pulsar import Client, Producer, MessageId

    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("pulsar-producer")

    def generate_test_message(sequence_number):
        """Generate a sample test message with timestamp and sequence number."""
        return {
            "message_id": str(uuid.uuid4()),
            "timestamp": time.time(),
            "sequence": sequence_number,
            "content": f"Test message #{sequence_number}",
            "metadata": {
                "source": "test-producer",
                "type": "test"
            }
        }

    def create_producer(client, topic_name):
        """Create and return a Pulsar producer."""
        try:
            return client.create_producer(
                topic=topic_name,
                producer_name="test-producer",
                schema=None,  # Use raw bytes for maximum flexibility
            )
        except Exception as e:
            logger.error(f"Failed to create producer: {e}")
            raise

    def main():
        # Parse command line arguments
        parser = argparse.ArgumentParser(description='Pulsar Test Message Producer')
        parser.add_argument('--broker-url', type=str,
                            default=os.environ.get('PULSAR_BROKER_URL', 'pulsar://pulsar-broker:6650'),
                            help='Pulsar broker URL')
        parser.add_argument('--topic', type=str, required=True,
                            help='Topic to produce messages to')
        parser.add_argument('--num-messages', type=int, default=10,
                            help='Number of messages to produce')
        parser.add_argument('--interval', type=float, default=1.0,
                            help='Interval between messages in seconds')
        parser.add_argument('--batch', action='store_true',
                            help='Send messages in batch mode without waiting')
        args = parser.parse_args()

        logger.info(f"Connecting to Pulsar broker at {args.broker_url}")
        client = Client(args.broker_url)

        try:
            producer = create_producer(client, args.topic)
            logger.info(f"Producer created for topic: {args.topic}")

            for i in range(1, args.num_messages + 1):
                message = generate_test_message(i)
                message_data = json.dumps(message).encode('utf-8')

                # Send message
                msg_id = producer.send(message_data)
                logger.info(f"Sent message #{i}/{args.num_messages} with ID: {MessageId.deserialize(msg_id)}")

                # Wait between messages unless batch mode is enabled
                if not args.batch and i < args.num_messages:
                    time.sleep(args.interval)

            logger.info(f"Successfully sent {args.num_messages} messages to {args.topic}")

        except Exception as e:
            logger.error(f"Error during message production: {e}")
        finally:
            # Clean up resources
            producer.close()
            client.close()
            logger.info("Producer closed")

    if __name__ == "__main__":
        main()
  pulsar_consumer.py: |
    #!/usr/bin/env python3
    import os
    import time
    import json
    import argparse
    import logging
    from pulsar import Client, ConsumerType

    # Configure logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )
    logger = logging.getLogger("pulsar-consumer")

    def create_consumer(client, topic_name, subscription_name, consumer_type):
        """Create and return a Pulsar consumer."""
        try:
            consumer_type_map = {
                "exclusive": ConsumerType.Exclusive,
                "shared": ConsumerType.Shared,
                "failover": ConsumerType.Failover
            }
            return client.subscribe(
                topic=topic_name,
                subscription_name=subscription_name,
                consumer_type=consumer_type_map.get(consumer_type, ConsumerType.Shared)
            )
        except Exception as e:
            logger.error(f"Failed to create consumer: {e}")
            raise

    def process_message(msg):
        """Process a received message and return parsed JSON content."""
        try:
            # Attempt to parse as JSON
            data = json.loads(msg.data().decode('utf-8'))
            return data
        except json.JSONDecodeError:
            # Handle non-JSON messages
            return {"raw_data": msg.data().decode('utf-8', errors='replace')}
        except Exception as e:
            logger.error(f"Error processing message: {e}")
            return {"error": str(e)}

    def main():
        # Parse command line arguments
        parser = argparse.ArgumentParser(description='Pulsar Test Message Consumer')
        parser.add_argument('--broker-url', type=str,
                           default=os.environ.get('PULSAR_BROKER_URL', 'pulsar://pulsar-broker:6650'),
                           help='Pulsar broker URL')
        parser.add_argument('--topic', type=str, required=True,
                           help='Topic to consume messages from')
        parser.add_argument('--subscription', type=str, default='test-subscription',
                           help='Subscription name')
        parser.add_argument('--consumer-type', type=str, default='shared',
                           choices=['exclusive', 'shared', 'failover'],
                           help='Consumer type (exclusive, shared, or failover)')
        parser.add_argument('--timeout', type=int, default=60,
                           help='Time in seconds to consume messages (0 for indefinite)')
        parser.add_argument('--earliest', action='store_true',
                           help='Start consuming from earliest available message')
        args = parser.parse_args()

        logger.info(f"Connecting to Pulsar broker at {args.broker_url}")
        client = Client(args.broker_url)
